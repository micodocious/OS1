Background: Function Call	 Description 
            -------------       -----------
            Create()	         To create a socket
            Bind()	         It’s a socket identification like a telephone number to contact
            Connect()	         Ready to act as a sender 
            Listen()	         Ready to receive a connection 
            Accept()	         Confirmation, it is like accepting to receive a call from a sender 
            Write()	         To send data 
            Read()	         To receive data 
            Close()	         To close a connection
            
Objective:  Your program will encrypt and decrypt plaintext into ciphertext, using a key, in
            exactly the same fashion as above, except it will be using modulo 27 operations: 
            your 27 characters are the 26 capital letters, and the space character. All 27 
            characters will be encrypted and decrypted as above.

Pseudocode: $ enc_client plaintext1 mykey 57171 > ciphertext1 
	    Run server in bg
	    Client must take in a textfile and a key
	    	if len of key < len of textfile then return error
	    Client sends over to server
	    	send the contents of key & length of key
	    	send the contents of text & length of text
	    Server will compare and encrypt the message and the key and send the ciphertext to client
	    	get length of key and text
	    	get the contents of key
	    	get the contents of text
	    	LOOP
	    	  cnvt_txt=convert char to num of text 
	    	  cnvt_key=convert chat to num of key
	    	  cipher_index=( cnvt_txt[index]+cnvt_key[index] ) % 26
	    	  final_buffer = cipher[cipher_index]
	    	send final_buffer to client

           
keygen:     This program creates a key file of specified length. The characters in the file generated 
            will be any of the 27 allowed characters (26 capital letters and 1 space), generated using 
            the standard Unix randomization methods.
            
            $ keygen 256 > mykey
                  
enc_server: This program is the encryption server and will run in the background as a daemon.
            -Its function is to perform the actual encoding, as described above in the Wikipedia
             quote
                  h       e       l       l       o  message
               7 (h)   4 (e)  11 (l)  11 (l)  14 (o) message
            + 23 (X)  12 (M)   2 (C)  10 (K)  11 (L) key
            = 30      16      13      21      25     message + key
            =  4 (E)  16 (Q)  13 (N)  21 (V)  25 (Z) (message + key) mod 26
                  E       Q       N       V       Z  → ciphertext
            - This program will listen on a particular port/socket, assigned when it is first ran
              (see syntax below).
              enc_server listening_port
            - SYNTAX [ $ enc_server 57171 & ]
            - Upon execution, enc_server must output an error if it cannot be run due to a network
              error, such as the ports being unavailable.
            - When a connection is made, enc_server must call accept to generate the socket used 
              for actual communication, and then use a separate process to handle the rest of the 
              servicing for this client connection (see below), which will occur on the newly accepted 
              socket.
            
            Psuedocode: USING SOCKET : Create socket that will listen to connections
            		 Set up address struct for the server socket
            		 USING BIND : associate the socker to the port
            		 Using LISTEN : start listening for connections and allow up to 5 connections to queue up
            		 accept a connection, blocking if one is not avaible until one connects
            		 LOOP: USING ACCEPT : accept the connection request which creates a connection socket
            		       Fork the progeam so that each server will have it's own temp fork that finishes...
            		       ...executing one the process is complete
            		       Using RECV : recieve length of the message and len of key for enc/dec
            		       Using RECV : recieve buffer	     
            		       encode
            		       send success message and encoded info
            		       close socket for this client
            		close listening socket
            		       
            		 
enc_client: Client code
            1. Create a socket and connect to the server specified in the command arugments.
            2. Prompt the user for input and send that input as a message to the server.
            3. Print the message received from the server and exit the program.
            
            - enc_client doesn’t do the encryption - enc_server does.
            - SYNTAX [ $ enc_client plaintext key port ]
            - TERMINATE with exit value 1. if enc_client receives key or plaintext files with ANY bad characters...
              ...in them, or the key file is shorter than the plaintext.
            - enc_client should NOT be able to connect to dec_server
            
            Psuedocode: Using SOCKET : create socket
                        Using CONNECT : connect to server
                        //USING fseek, ftell and fread. Open msg, read it, store len of msg and msg itself. 
                        
                        Recieve info from the server and print to stdout
                        USING RECV : 
                      	   
                        close socket
                          
dec_server: Basically same as enc_server
dec_client: Basically same as enc_client
